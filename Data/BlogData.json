BlogData = [
    {
        "Title": "Home Page",
        "Content": "<h1>Michael Warmbier's Blog</h1>  <article class='h0' style='text-align: center;'>     Welcome to my blog page! Here you'll find articles containing updates to projects I'm working on, things that I'm interested in or philosophical ideas I want to discuss! </article>"
    },
    {
        "Title": "Philosophical Memoir",
        "Content": null
    },
    {
        "Title": "All Thoughts",
        "Content": "<h1>Philosophical Memoir</h1><h2>¶T.0 - October 8th, 2023</h2><article>The purpose of this text is not to act as a diary, nor a journal. The sole purpose of what you are reading is to compile, dissect and offer perspective philosophical ideas. Each paragraph, denoted by ¶, represents a thought that I wish to discuss. Each thought is isolated, although future thoughts may reject or update old ones. Each thought is accompanied by a date as well.For the sake of context, here is some background about myself: my name is Michael Warmbier. At the time of writing this notion, I am twenty-three years old and currently enrolled in University studying Computer Science and Mathematics. Philosophy can be seen as one of my hobbies, although I think it is more appropriate to say that philosophy is naturally a part of any subject. It is only natural for individuals to extend their foundation of knowledge towards understanding the world around them. Every discipline is its own philosophy, its own interpretation of ideas; this discussion however, should be left for future thoughts.It is my hope that one day this text may be shared and provide another person with insight, clarity or the ability to themselves interpret abstract ideas in their own way using their own foundation of knowledge.</article><h2>¶T.1 - October 8th, 2023</h2><article>It is quite a popular idea that “open mindedness” is a positive characteristic for one to have. Why, then, would you say having a belief swaying from the absolute is considered so dastardly among the populace? The idea of not fitting into a pattern, a set of labels for others to identify you as, is so unnatural to humans designed to recognize patterns that despite our ability to recognize having an open mind as having a positive connotation, we deem concepts with similar meaning as having an opposing negative one. In politics, centrist or alternative beliefs, those not founded upon the two extremes countries often rely on, is considered by many the result of unformulated opinions and is often viewed as problematic, anti-progressive. The ability of a human to use their greatest asset, their mind, to round our their beliefs and determine what value the world offers and what makes them happy depends on their ability to intake information from various sources. To be so stubborn that one would deny opportunities to learn so easily from others is a trait that can only be looked down upon by those capable of seeing its flaws. By allowing opposing ideas and opinions to enter your life, you offer yourself the opportunity to reaffirm your beliefs and improve your flaws. Labels and closed minded actions are the result of fear; a fear of what change could bring, what it could prevent. We all have dreams, idealistic concepts of our future. Some of us view our position in the world now as a step towards those dreams, being too afraid to move forward with a chance that we could fall backwards. But allowing that change to happen is what allows us to gracefully move towards an ideal. There is no absolute perfect scenario, there are only a set of desirable ones that we must adapt to stay within. The path towards happiness is never a straight line, rather a path full of missteps and backtracks that culminate in a path so erratic that it leads to an inevitably satisfying conclusion that defines a person along the way. The end isn’t perfection, its contentedness. Closing your mind to reality as a response to fear is giving up on the potential you have as a person.</article><h2>¶T.2 - October 9th, 2023</h2><article>There are a lot of issues I have with the way the education system in America, as well as other countries in their own respective way, prioritizes certain subjects. Among many other concepts in school was the concept of “abstractness”, something I was certainly unable to properly define as a child and far into my early adulthood. Abstract concepts are those which are malleable, undefined. Ideas that only exist to be projected into reality through interpretation by an individual. They are interfaces we interact with. A person is a real, physical object that holds a lifespan; they exist until their body decays, or until their atoms turn into molecules. Setting aside the concept of linguistic identifiers themselves being abstract, a human being can be used as an antithesis. Unlike concrete things, abstract objects are those which fade not as a result of physical decay but mental. These concepts reach the end of their lifespan only when no individual on earth is left remembering its existence. It could be argued that the malleable nature of the abstract blurs the line from extension of an idea and entirely new idea, thus making such a finality a lot less final. However, the most important take away from the meta concept of concepts themselves is that they are in a different plane of reality than the one we typically interact with. They are akin to the digital logic that fuels computers; thus we have full control over what they eventually become. An idea often spread around is one suggesting that a person does not truly die until they are forgotten. This idea refers not to their body but their legacy; the compilation of their identity, experiences, actions and impact. If we collectively ignore a large metal cube, this cube will certainly remain intact for centuries or even more until the inevitability that is nature in its nonconforming nature not ignoring the cube until it weathers away. Ideas, however, must be given attention to in order to properly exist for this time. To answer the question of a tree falling in an isolated location, and whether or not it truly makes a sound.. this question depends entirely on whether or not you may considered sound physical or a concept only made possible through our interpretation of the waves of force that travel across the air. Can you ever state certainly that something is concrete if the deceleration of such relies on us defining it using abstract elements?</article><h2>¶T.3 - October 9th, 2023</h2><article>It is important to distinguish a “Software Engineer” from a “Programmer”. I often explain the difference between the two thusly: an engineer creates a system, an implementer implements that system. Such distinctions seem trivial, however in the modern era these two terms are often seen as synonymous. This is despite the fact that engineers are often bestowed upon with these titles from credible sources, unlike programmers which are given these titles with no real distinction. That isn’t to say that programming is a useless or easy skill, it is a fundamental tool which comes with its own set of obstacles and trials. Though one may easily mistake this tool set they have as enough to design a complex system. Programmers are not taught how to coordinate a set of objects, elements, systems and subsystems in a manner which is cohesive and efficient. Simply understanding the concepts of data structures and “Big O Notation” is not enough to properly portray a paradigm. In the most simple model of the lifespan of software development, dubbed the “Waterfall Model”, most interpretations include <em>design</em> as a precursor to the inevitable <em>implementation</em>. Yet this step is often the lowest regarded by eager young programmers that learn about it; its value is seen as an obligatory step which is mentioned as a formality rather than a fundamental key in creation. Bluntly: designing the structure of the components of software such that they interact properly, efficiently and reliably is not only necessary but <em>important</em> in create a future-proofed and reliable piece of software. It can not be overstated; blindly implementing an innovative idea without thorough testing and proper analysis of its modules will likely lead to a disappointing result immediately or eventually. The result of an unplanned, functional block of code is not software, but a <em>script</em> which completes a simple tasks not befitting of complex representation.</article>"
    },
    {
        "Title": "Old Blog Articles",
        "Content": null
    },
    {
        "Title":"Understanding How Students Learn",
        "Content": "<h1 id='understanding-how-students-learn'>Understanding How Students Learn</h1><p style='text-align: center !important; width: 100% !important'><strong>September 13th, 2023</strong></p><h2 id='©-michael-warmbier'>© Michael Warmbier</h2><h3 id='introduction'>Introduction</h3><p>One of the most commonly applied theories for how individual students can be categorized into different learning styles is through the use of <a href='https://en.wikipedia.org/wiki/Learning_styles#Learning_modalities'>Walter Burke Barbe&#39;s proposed learning modalities</a>. For those unaware, this list includes visualization, auditory memorization and kinesthetic interaction. These learning modalities suggest that students fit into one of three areas and have the ability to retain more information through the use of information that is presented via their respective mental strengths. </p><p>It is true that many have argued against this theory in the past, and that its use in modern teaching is waning over time. However, few have offered a counterproposal beyond the already established ideas proposed by other philosophers. My goal with this article is to formulate my own ideas in text and to allow others to discuss, debate and expand upon them.</p><h3 id='memory-and-attention'>Memory and Attention</h3><p>To start, it is important to distinguish the clear differences between an individual retaining their attention to information being presented to them and actually memorizing it. In regards to the previously mentioned learning modalities, the utilization of sensory ability leaning to absorb information can clearly be seen as only aiding in a student&#39;s ability to retain attention. This allows the theory to hold some truth, making it possible to argue. However, attention does not necessarily equate to memorization. It can be argued that true interest in a subject, that is the desire to know more, is what allows the brain to be open to new information. Memories are built upon former memories, complex ideas are reliant on less complex foundational knowledge. Because of this, simply being adept at absorbing information through a specific medium cannot necessarily guarantee this necessary pairing. In order to understand how students can successfully retain new information, we need to look at the foundations that make up individual students&#39; minds.</p><h3 id='algebra-fanatics-dilemma'>Algebra Fanatic&#39;s Dilemma</h3><p>Say you are a student; you grew up proficient in mathematics and have always enjoyed the subject. You find the way each rule relies on a clear and well-defined set of theorems easy to process and thus learning new topics in the subject is quite easy. But alas, you are required to take an elective and choose an artistic class in order to take a break from your major and learn about something new. However, you struggle to understand how to create something out of nothing. The idea of &quot;winging it&quot; doesn&#39;t make sense with your concept of how things typically work. There has to be a <em>reason</em> why artists utilize the techniques and styles that they do, it can&#39;t just be natural, can it? This hypothetical dilemma shows that individuals can often be met with mental roadblocks in the form of non-compatible information with their pre-established understanding of how to process new information</p><h3 id='different-types-of-learning'>Different Types of Learning</h3><p>It can be difficult to narrow down each generalization of information processing. A good starting point is surely logical reasoning, as this is what is often taught in schools in order to make great learners. Logical reasoning as a foundation implies individuals are able to take a set of pre-established rules and follow them. Should an idea not be properly explained, that is presented in such a way that the educator does not explain how it follows those pre-established rules, then it is more difficult for individuals to justify remembering it, mentally.</p><p>It can then be argued that the opposite of a logical mindset is an illogical one, or more accurately, a creative one. That is, creativity is the result of spontaneous ideas based on former experiences and knowledge. Creative individuals understand new ideas and techniques as fluid extensions of their own minds rather than the result of rules. It can therefore be argued that in the previously described scenario of a mathematics student being taught a topic without a clear explanation, a creative individual is more likely to understand the new information as another tool in their arsenal.</p><h3 id='conclusion'>Conclusion</h3><p>It is often these two mindsets that contradict each other the most. Individuals usually excel at one and not the other. It correlates with the idea that different parts of the brain excel at logical tasks and creative ones, as well. Though I do not believe that students are limited to just two options, but that there is a spectrum between the two extremes. One could argue that an organized person, capable of making in-depth spreadsheets while also creatively using colors and design to properly represent the information, lies somewhere on this spectrum in the middle. Although the idea may not be entirely original, I am going to coin the term <strong>Spectrum of Reasoning</strong> for this abstract concept.</p><p>There is, of course, much more discussion to be had. Ideas proposed by thinkers are meant to be contradicted until a majority of people can conclude their stance on it. So, feel free to send your opinions to <a href='mailto:&#109;&#x69;&#99;&#104;&#97;&#101;&#108;&#99;&#119;&#x61;&#x72;&#x6d;&#x62;&#x69;&#x65;&#114;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;'>&#109;&#x69;&#99;&#104;&#97;&#101;&#108;&#99;&#119;&#x61;&#x72;&#x6d;&#x62;&#x69;&#x65;&#114;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a>. If they are well-thought-out and interesting enough, I may even append this article with my response!</p>"
    },
    {
        "Title": "NeoTock",
        "Content": "<h1 id='neotock'>NeoTock</h1><p align='center' style='text-align: center !important; width: 100% !important'><strong>August 2nd, 2023</strong></p><h2 id='©-michael-warmbier'>© Michael Warmbier</h2><p><a href='https://github.com/MichaelWarmbier/NeoTock'>NeoTock</a> is a personal project that was inspired by the lack of similar applications readily available. In my quest to find an appealing clock application for my terminal window to put next to my resource monitor, <a href='https://github.com/ClementTsang/bottom'>bottom</a>, I was met with a lack of applications that did exactly what I wanted. I found one amateur example that seemed to have been created by a student, as well as another by <a href='https://github.com/nwtnni'>nwtnni</a> named <a href='https://github.com/nwtnni/tock'>tock</a>. This was the inspiration for the name NeoTock (literally meaning: new tock). Unfortunately, tock lacked the cross-platform functionality I was hoping for. I currently use Windows on my main computer and because of this I needed an app that would run on both Linux and Windows. </p><p>After deciding to use JavaScript to design NeoTock (at the time a working title, but one that grew on me) it was suggested by a colleague of mine to use TypeScript. After some studying of the syntax and concepts behind TypeScript, I began work on what is (at the time of writing) now a work-in-progress NeoTock.</p><p align='center'><img src='https://camo.githubusercontent.com/522b5e655d61a368fc38c460303618394142403bf35f775741e2fd9c3e9be2d4/68747470733a2f2f6d69636861656c7761726d626965722e6769746875622e696f2f4173736574732f50726576696577732f6e656f746f636b2e676966'></p><h5 id='the-initial-appearance-of-neotock'>The initial appearance of NeoTock</h5><p>Ultimately this project wasn&#39;t going to be incredibly complex. There were a few areas of interest, such as the display of the numbers and as the handling of arguments that would prove good opportunities for optimization at a later day, however, the initial goals were fairly simple. I needed to find a way to properly display the clock on the screen, handle time with respect to various time zones and output audio for a proper alarm to play in a manner that would work on various platforms. For each of these problems, I relied on different packages already created to handle such problems.</p><p><a href='https://www.npmjs.com/package/blessed'>blessed</a> was my choice of library for displaying my application to the screen. It seemed to prove reliable and understandable and was already a pseudo-standard among similar applications. It also came with its own TypeScript support.</p><p><a href='https://www.npmjs.com/package/moment-timezone'>moment-timezone</a> was an incredibly easy to use application already designed to handle complex timezone problems. In the words of Tom Scott:</p><blockquote><p>&quot;What you learn after dealing with timezones is that what you do is you put away your code, you don&#39;t try and write anything to deal with this, you look at the people who have been there before you, you look at the first people who have dealt with this before [...] you take what they have made, you put it in your program. and you never ever look at it again.&quot;</p></blockquote><p>A lot of applications were offered as solutions by the incredibly research-efficient <a href='https://chat.openai.com/'>ChatGPT</a> (which was used at a minimum for research purposes) however the one that I ultimately decided on utilizing was <a href='https://www.npmjs.com/package/speaker'>speaker</a>. This came with its own problems and difficulties but I already knew going into this application that the most problematic aspect was going to be sound.</p><p>I took some inspiration from the aforementioned bottom as well and tried to allow as much customization as possible through the use of an external <code>.json</code> file the user could modify at their leisure. Given the nature of an application such as this to be primarily for terminal buffs, it seemed reasonable to ask the user to understand how to modify such a file. Even so, there are still shortcut arguments that have been implemented and more on the way to make this process easier.</p><p>What I&#39;ve learned from working on NeoTock is that creating a terminal application is an incredibly fun and fulfilling side project for anyone to work on that I highly recommend. Terminal displays are incredibly useful and well-supported by other packages. The result is satisfying and absolutely utilitarian. Don&#39;t doubt your ability, just try!</p>"
    },
    {
        "Title": "Extracting Information From Files",
        "Content": "<h1 id='extracting-information-from-files'>Extracting Information From Files</h1><p style='text-align: center !important; width: 100% !important';><strong>August 15th, 2023</strong></p><h2 id='©-michael-warmbier'>© Michael Warmbier<h2><p>&emsp;Recently while doing some work for my employer that relied on the application <code>drawio</code> for organizing various values visually, I notice how daunting the task of moving all that information into spreadsheets and comparing it directly with already existing information became. I decided I wanted to fix this by making an application that removed the text directly from the files that I could build on later. The only problem is I didn&#39;t know how or if it was even possible.</p><p>My first idea was that the <code>.drawio</code> file extension that the application relies on for saving its data was a glorified <code>.svg</code> file. Not being super familiar with the file format structure, I figured it was absolutely possible that the text may be saved in such a way it was impossible to extract the actual text from it. To help with this, I asked my friend <a href='https://github.com/MendelPro/'>MendelPro</a> who has worked with decompilation and file traversal in the past. After messing around with the files, he learned that they were accessible as text files and appeared to be custom XML that converted into SVG.</p><p>With this information, it was time for me to figure out if I could find the text within these files. Sure enough, it all was there within tags that didn&#39;t distinguish it in any way. Luckily, it was the only element that relied on the &#39;value&#39; tag to store the information. Knowing this, I just had to find out an easy way to remove all the extra <a href='https://www.w3schools.com/html/html_entities.asp'>HTML entities</a> that surrounded the text. Thankfully, this proved really easy as you will now see.</p><p>I started designing an application, one that you can now view here as the <a href='https://github.com/MichaelWarmbier/Drawio-Text-Extractor'>Drawio-Text-Extractor</a>. I found a library, <code>xml-js</code> that not only converted the XML data to JSON, but also replaced the HTML entities with their HTML equivalents. This made it <em>very</em> easy to use RegEx to remove all the markup elements. I then convert the JSON to an object and being parsing it so I can find these keys labeled &quot;value&quot;. Within them was all the text I needed.</p><p>Now that I had all the text, I could save it as any file type I wanted that was reasonable and easy to translate. I settled on (at the time of writing) text, comma-separated values, tab-separated values and Excel spreadsheets data. To improve the utility&#39;s reliability, I added a scanning feature that would either <em>normal scan</em>, thus performing these operations on each file within a specific directory, as well as a <em>deep scan</em>, which would extract text from <em>all</em> files within an entire file system given a root folder.</p><p>Overall this application was a short (taking less than six hours from start to initial release) but overall fun project that allowed me to give data extraction a shot. It wasn&#39;t the hardest task to accomplish, and I&#39;ll be honest the tool is really niche, but hopefully I&#39;ll be able to use what I learned for a more significant problem or project in the future.</p>"
    },
    {
        "Title": "Image Processing - RGB Color Space",
        "Content": "<h1 id='image-processing-rgb-color-space' style='width: 100% !important; text-align: center !important;'>Image Processing: RGB Color Space</h1><p  style='width: 100% !important; text-align: center !important;'><strong>February 18th, 2023</strong></p><h2  style='width: 100% !important; text-align: center !important;' id='©-michael-warmbier'>© Michael Warmbier</h2><p>&emsp;&emsp;Recently, I&#39;ve begun attending a class where I&#39;ve been learning <em>Image Processing</em>. I&#39;ve only just started, and a lot of the topics are interesting enough to write blog posts about on their own. To start, I wanted to discuss some methods I made using the <em>Python</em> <code>PIL</code>, or <strong>Pillow</strong> library. I made these to separate the RGB color spaces to quickly make observations about different images, as well as for future projects.</p><p>To start, here are the library dependencies I used for this specific set of methods:</p><pre><code class='language-py'># Image manipulation<br>from PIL import Image<br># Formulas<br>import numpy as np<br></code></pre><p>I use more libraries overall, but this should cover these specific dependencies. Also, all of these examples were made with and programmed on <em>Repl.it</em>.</p><p>First up, we have a method that will divide an image of three channels, like RGB and HSV/HSL, into three separate channels of the color space, and save those channel as a representation of only <strong>L</strong>, or grayscale.</p><pre><code class='language-py'>def splitChannels(image): <br>sW, sH = image.size;                                  # Store image size dimensions<br>pX = image.load();                                    # Create a pointer to image pixels<br>Channel = [                                           # Initialize three new grayscale images<br>Image.new(&#39;L&#39;, (sW, sH), 0),<br>Image.new(&#39;L&#39;, (sW, sH), 0),<br>Image.new(&#39;L&#39;, (sW, sH), 0)<br>];<br>CPx = [];                                             # Create and load three new pointers for these images&#39; pixels<br>for v in range(3): CPx.append(Channel[v].load());<br>for index in range(3):                                # Iterate each color into one image each, by pixel<br>for x in range(sW):<br>for y in range(sH):<br>CPx[index][x, y] = pX[x, y][index];<br>return Channel;                                       # Return all three images<br></code></pre><p>Next, a method responsible for converting that grayscale data into its specific color representation. I separated these methods into two in case of the likely scenario that I want to compare the grayscale and color versions of images.</p><pre><code class='language-py'>def L_To_RGB(image, color):                         <br>sW, sH = image.size;                                    # Store image size dimensions<br>pX = image.load();                                      # Create a pointer to image pixels<br>Result = Image.new(&quot;RGB&quot;, (sW, sH), 0);                 # Create a new image of the same size<br>rPx = Result.load();                                    # Create a pointer to new image&#39;s pixels<br><br># Iterate each pixel in grayscale and move over to new image as only equivalent color channel provided.<br>for x in range(sW):                                      <br>for y in range(sH):   <br>if (color.lower()  == &#39;r&#39;): rPx[x, y] = (pX[x, y], 0, 0);if (color.lower()  == &#39;g&#39;): rPx[x, y] = (0, pX[x, y], 0);<br>if (color.lower()  == &#39;b&#39;): rPx[x, y] = (0, 0, pX[x, y]);<br>return Result;                                          # Return single image of color<br></code></pre><p>Utilizing these two methods, I made some examples of interesting images that I think many would appreciate:</p><p align='center'><img src='https://cdn.discordapp.com/attachments/1071220323581702144/1076623230078558248/index.webp'></p><h4 id='original-image-before-channel-split-rgb-venn-diagram'>Original image before channel split; RGB Venn diagram.</h4><p align='center'><img src='https://cdn.discordapp.com/attachments/1071220323581702144/1076623091846877285/image.png'></p><h5 id='image-divided-by-color-space-and-placed-side-by-side'>Image divided by color space and placed side-by-side.</h5><br><p align='center'><img src='https://media.discordapp.net/attachments/1071220323581702144/1076624438197497967/image.png?width=1080&height=304'></p><h4 id='generic-rainbow-of-colors-from-left-to-right-original-blue-values'>Generic rainbow of colors. From left to right: original, blue values.</h4><p><br><br></p><p>&emsp;&emsp;Personally, I think being able to manipulate colors and represent them like this is incredibly interesting. There&#39;s a wide variety of use for extracting color information; most notably image enhancement observational data. </p><p>Regardless of its immediate use, being able to represent color as information and then portray that information in a visible representation akin to its origin is not only incredibly fascinating, but objectively educational.</p>"
    },
    {
        "Title": "Developing Games for Console Window",
        "Content": "<h1 id='developing-games-for-a-console-window' style='width: 100% !important; text-align: center !important;'>Developing Games For a Console Window</h1><p align='center' style='width: 100% !important; text-align: center !important;'><strong>February 7th, 2023</strong></p><h2 id='©-michael-warmbier' style='width: 100% !important; text-align: center !important;'>© Michael Warmbier</h2><p>&emsp;&emsp;After I had just finished my introductory course for my major, <em>Introduction to Computer Science</em>, I of course learned how to create programs that ran in the Windows <em>Command Prompt</em> application by default. At the time, I wasn&#39;t very familiar with libraries and how they could be utilized to create different program windows, graphical user interfaces and speed along the process of making these applications. I did, however, know how to output text using <code>cout</code>.</p><p>Out of genuine interest for the subject I eventually stumbled upon one of the many videos that went over how to make <em>Pong</em> in C++, through the console. Admittedly what allowed this guide to stand out from the rest, in retrospect, was how it didn&#39;t rely on high-level concepts to teach a relatively low-level project. No classes, no enumerators; these were things I had to implement myself after learning about their using and noticing how it could apply. What I did learn about, however, was the concept of a game loop. Specifically, I learned about how you could break portions of the code into individual scripts or functions that ran within a constant loop.</p><pre><code class='language-cpp'>bool GAMEOVER = false;<br>int main() {<br>&emsp;do {<br>&emsp;&emsp;draw();     // Draw screen<br>&emsp;&emsp;input();    // Input handle<br>&emsp;&emsp;logic();    // Apply logic<br>&emsp;} while (GAMEOVER);<br>}<br></code></pre><p>This was a relatively simple structure that would be the basis for my next four projects; projects that I now dub the &quot;Console Game Library&quot; or similar. In short, these were four games I recreating utilizing the techniques I learned from this point onward that relied on no libraries save for <code>&lt;Windows.h&gt;</code>, for <code>draw()</code> and the standard libraries. The only exception to this rule was <code>&lt;chrono.h&gt;</code>, which I used to control the <strong>f</strong>rames <strong>p</strong>er <strong>s</strong>econd of the programs I made with delta time.</p><hr><h3 id='pong' style='width: 100% !important; text-align: center !important;'>Pong</h3><br><p>&emsp;&emsp;Of course, the first project I worked on was <em>Pong</em>. It wasn&#39;t anything special, just a two-dimensional array of values output to the screen using conditional logic based on the <strong>i</strong> and <strong>j</strong> values of their elements. I created walls, a ball and paddles and drew them to the screen one every available frame. There was no frame limiting, and the only improvement I made to the code it was inspired from was the use of a function to remove the output carot from the display and a <code>&lt;Windows.h&gt;</code> method to move the cursor faster. I also implemented the most basic AI I&#39;ve ever created: a paddle who had a chance to move in the direction opposite of its target, the ball.</p><p align='center'><img src='https://camo.githubusercontent.com/a837346fc5b8920a6bf6c7270b0775527b0d239c89faed7d503f1b3befb431d8/68747470733a2f2f692e6779617a6f2e636f6d2f35623537343461616132393661653538363966323831623734313461643461382e676966'></p><h5 id='a-recently-designed-game-of-pong-i-made-in-about-ten-minutes' style='width: 100% !important; text-align: center !important;'>A recently designed game of <em>Pong</em> I made in about ten minutes.</h5><br><hr><h3 id='tetris' style='width: 100% !important; text-align: center !important;'>Tetris</h3><br><p>&emsp;&emsp;After messing with some options for awhile I had the idea of recreating more complex games. With <em>Tetris</em>, it was really a matter of learning the unique characteristics of a game with more features within it. I had to understand collision, specifically projecting collision a frame ahead and then determining the resulting logic, proper <strong>r</strong>andom <strong>n</strong>umber <strong>g</strong>eneration (which, unlike with JavaScript or Python, was a lot less random when performed quickly due to its reliance on <code>&lt;ctime&gt;</code>) and most importantly: <code>draw()</code> improvements.</p><p align='center'><img src='https://camo.githubusercontent.com/d3dc1f76f02c98dfb00a8810f06892832868f76a67638d1718c473b1b15e9f4c/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6174746163686d656e74732f3439333836363835353336333131373035372f3534393036323730303531373239343130372f47616d65706c61792d312e676966'></p><h5 id='tetris-displayed-using-ascii-along-with-the-carot-before-its-removal' style='width: 100% !important; text-align: center !important;'><em>Tetris</em> displayed using ASCII; along with the carot before its removal.</h5><br>Initially I used more ASCII, although I started to incorporate the extended ASCII chart. I learned by asking questions in search engines such as, 'can you change the color of ASCII output?'. Turns out, you can do this and much more. This was also the project wherein I finally utilized the aforementioned `<chrono.h>`.<p align='center'><img src='https://user-images.githubusercontent.com/44079959/59775479-4ce3a500-927f-11e9-8871-479e8500e695.png'></p><h5 id='a-later-version-mostly-utilizing-square-shaped-pixel-projections'  style='width: 100% !important; text-align: center !important;'>A later version mostly utilizing square-shaped pixel projections.</h5><br><p>More importantly than all that, however, were the imrpovements I made to the output. Instead of relying on ASCII, I started using pixel projections, mostly lines and squares, to make actual sprites. Though this quickly had to be improved, since the responsible methods had tons of overhead and were very slow when creating more complex images. The answer: bitmaps. By using bitmap sprite sheets, I was essentially creating games with a very novel approach. I created evenly-sized sprites on a sheet, indexed them as constant data and relied on them for the output of the game. After a few design changes, the <em>Tetris</em> that stands today was created.</p><p align='center'><img src='https://camo.githubusercontent.com/45dd0977870a249a4fbb1b4f8f56c14a088d8118f7ea95a62651399c0bd9d336/68747470733a2f2f692e6779617a6f2e636f6d2f37386537643164393331326661313037396635383265623861626335663332362e676966'></p><h5 id='a-fun-animated-menu-screen' style='width: 100% !important; text-align: center !important;'>A fun, animated menu screen.</h5><br><p>It must not be understated how useful this project was to me as a student. Not only did it teach me more than anything thus far, but it was one of the most exciting and fulfilling projects I&#39;ve ever made. Being able to turn my ideas into reality, even to a small degree, was exciting and part of the reaosn why I still program to this day.</p><hr><h3 id='pacman'  style='width: 100% !important; text-align: center !important;'>Pacman</h3><br><p>&emsp;&emsp;Admittedly this project went incomplete, for one very important reason: the work that was never completed was tedious. As disappointing as it sounds, I, as a student with barely any time to myself, did not feel interesting in programmaging, from scratch, lengthy and complex cutscenes. Despite this, a lot of features that went above and beyond the core concept of the game were made. Proper level counters, mimicked bugs present in the original arcade version of <em>Pacman</em>, pixel-perfect collision considerations, etcetera. This project includes the most complex sprite sheet of all four games, and took a lot of research into rules and design of the game. Not having any useful tools or access to the code directly at the time, this information was compiled using cross-reference research. </p><p align='center'><img src='https://user-images.githubusercontent.com/44079959/59776935-aa78f100-9281-11e9-9c64-e8aadf9b4e88.png'></p><h5 id='the-original-build-of-console-pacman' style='width: 100% !important; text-align: center !important;'>The original build of <em>Console Pacman</em>.</h5><br><p>Unlike the previous games on this list, I tried to make this as <em>visual accurate</em> to its original as possible. Because both this version and the original relied on 24bit sprites, it wasn&#39;t very hard once I figured out how it all worked. The hardest challenge overall was recreating the complex targeting AI that the <em>ghosts</em> within the games rely on, something I hope to go more in-depth on in the future.</p><p align='center'><img src='https://camo.githubusercontent.com/588cc76b64041772bebb8665cd0aac3834f0c937162bc80bba1ad66a65ddec76/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6174746163686d656e74732f3533313631393332383736303631303832362f3633343431303530323836343234303634302f756e6b6e6f776e2e706e67'></p><h5 id='the-final-build' style='width: 100% !important; text-align: center !important;'>The final build.</h5><br><hr><h3 id='minesweeper' style='width: 100% !important; text-align: center !important;'>MineSweeper</h3><br><p>&emsp;&emsp;This project, unlike the rest which took considerable time, took me two days to develop. I applied everything I learned previously, with the only unique concept applied being recursion. Though, I took a lot of liberty with the sprite creation; having created entirely original sprites with no direct inspiration, save for the smiley face that is a staple to the original <em>MineSweeper</em>.</p><p align='center'><img src='https://user-images.githubusercontent.com/44079959/64381362-05102680-d001-11e9-8e60-8b7c178b8daf.png'></p><h5 id='console-minesweeper-mid-gameplay' style='width: 100% !important; text-align: center !important;'><em>Console MineSweeper</em> mid gameplay.</h5><br><p>Overall this project turned out nicely, though not without its flaws. Its compact and simple, and still fun to play. I genuinely recommend it as an interesting project for new programmers that connects a ton of concepts, like RNG and recursion, without introducing more complex ones.</p><hr><h3 id='five-nights-at-freddys'  style='width: 100% !important; text-align: center !important;'>Five Nights at Freddy&#39;s</h3><br><p>&emsp;&emsp;Based on the cult-classic of 2014; instead of being a direct recreation of another game in the C++ language, this was a re-imagining of the mechanics present in the original. Stripping the atmospheric horror and limiting the game to its core logical mechanics, <em>Console Five Nights at Freddy&#39;s</em> was an interesting way of applying randomized artificial intelligence. Nothing was too complex, though still had to be researched similarly to <em>Console Pacman</em>&#39;s development. Some liberties had to be taken as a result of the perspective switch, but overall the gameplay feels the same. Most interestingly, this actually a user to run a simulation, of sorts, of the original. This type of &quot;recreation for the sake of teaching&quot; use case is something I explored in later projects, such as <em>Pacman in Game Maker</em>.</p><p align='center'><img src='https://camo.githubusercontent.com/e36bf535e69ecb4b6fbbfa65ba2c002d884562edae421d6bac608c81ea32ea9b/68747470733a2f2f6779617a6f2e636f6d2f31336432323163396636383133376661383335313564353237316134303864372e676966'></p><h5 id='an-example-of-the-camera-switching-mechanic-in-the-game' style='width: 100% !important; text-align: center !important;'>An example of the camera switching mechanic in the game.</h5><br><hr><h3 id='final-thoughts'  style='width: 100% !important; text-align: center !important;'>Final Thoughts</h3><br><p>&emsp;&emsp;The idea of making a pgame in the Windows console is not new, its not unique and its not necessarily complex. However, I truly value this experience as it introduced me not only to new and interesting concepts that I had yet to learn, but the amount of work someone can complete when inspired and excited to do so. There are many project ideas I have not completed or have never begun, and who knows if I&#39;ll ever finish them. But I do know that the ones I put the most love into and commit as much as possible,  are the ones that allow me to express my interests in fun, useful and interesting ways.</p>"
    },
    {
        "Title": "The Creation of SmiteBuildMaker and the Smite API Application",
        "Content": "<h1 id='the-creation-of-smite-build-maker-and-the-smite-api-application' style='width: 100% !important; text-align: center !important;'>The Creation of Smite Build Maker and the Smite API Application</h1><h2 align='center' style='width: 100% !important; text-align: center !important;><strong>January 26th, 2023</strong></p><h2 id='©-michael-warmbier' style='width: 100% !important; text-align: center !important;'>© Michael Warmbier</h2><p>&emsp;&emsp;In mid-2021, a colleague of mine had suggested creating a tool that would be able to perform calculations of various characters in a video game called <em>Smite</em>. Smite is a game designed around the MOBA genre, where you pick characters based on Gods and deities from various pantheons and then battle in a strategy arena. Its design relies on player choice dictating what items to buy throughout the course of various matches, which apply statistical changes that allow the player to earn an edge in gameplay.</p><p>Originally, this project was conceived through <em>Google Sheets</em>. A tool was created to see the various base statistics that each character would gain depending on their level within the game. This proof of concept was later extended into an idea called <em>SmiteStats</em>. SmiteStats, the precursor name to SmiteBuildMaker, was going to be a website that allowed users to calculate the results of various item configurations, <em>builds</em>, without having to open the notoriously slow game themselves in order to use the built-in builder provided. </p><p align='center'><img src='https://github.com/MichaelWarmbier/michaelwarmbier.github.io/blob/master/Assets/Previews/api_app.gif?raw=true'></p><h6 id='the-original-appearance-of-the-smite-api-app-'><p align='center'>The original appearance of the Smite API APP </p></h6><p>In order to create a website, I requested permission to access Smite&#39;s official API and receive developer credentials. Unfamiliar with using API, I did research and eventually found various then-outdated repositories of wrapped methods and similar tools. The decision was eventually made to take the initiative and create what was then my first original solo project, the <em>Smite API App</em>. Originally it was a series of wrappers that progressed into a C-like asynchronous structure despite its design being in <em>Node.js</em>. Through use of custom methods, I was able to access the API using nothing but a basic command-line interface. Later on, these methods were improved and combined into one large algorithm that relied on the user input from the CLI to complete its task. In order for this to be possible, several subroutines were created to handle the various information requests the API had. Eventually, everything was restructured and underwent a relatively lengthy documentation period that resulted in the published product being marketed as a developer tool for those who just needed raw <code>.json</code> and <code>.xml</code> formatted data.</p><p align='center'><img src='https://github.com/MichaelWarmbier/michaelwarmbier.github.io/blob/master/Assets/Previews/smiteapi.gif?raw=true'></p><h6 id='the-smite-api-app-as-it-looks-today'><p align='center'>The Smite API App as it looks today</p></h6><p>The documentation of the Smite API App was an incredible learning experience about the values of documentation and how it can impact the development process of a project. It&#39;s still regarded as one of my favorite projects ever and my first software project in general, even if it lacks a lot of potential additions in that regard.</p><p align='center'><img src='https://media.discordapp.net/attachments/239457759836372996/859520411293450240/unknown.png?width=1057&height=481'></p><h6 id='-an-example-of-a-proposition-created-by-a-peer-at-the-time-'><p align='center'> An example of a proposition created by a peer at the time </p></h6><p>Being unfamiliar with back-end web development and primarily focused on front-end and programming, the API hurdle was a tough one to overcome. Eventually, the project was moved over to <em>Repl.it</em>, which is where it still resides and is hosted from. This allowed for a much faster development process, as well as server space to store the <code>.json</code> data. Slowly I began creating a website that could read Gods and items from this data and use the information to change elements on the screen.</p><p>At this point the site was undergoing multiple redesigns as my skills with CSS, HTML and JavaScript improved. Feedback was received from peers that was translated into changes still present to this day. A secondary program was made, named the Smite Data Formatter, specifically made to automate the translation of all necessary <code>.json</code> files into a single collection of data that relied on a reference of information that was excluded from that data to be created. This also underwent several changes for the sake of effectiveness, but the original code went unchanged.</p><p align='center'><img src='https://github.com/MichaelWarmbier/michaelwarmbier.github.io/blob/master/Assets/Previews/smitebuildmaker.gif?raw=true'></p><h6 id='-smite-build-maker-as-it-looks-today-'><p align='center'> Smite Build Maker as it looks today </p></h6><p>Utilizing these three applications in conjunction, a prototype website was created lacking most of the features available today. This was released on March 25th, 2022 and has since been expanded upon, added various features present in the game and fixing bugs in order to make the results as accurate and customizable as possible. The choice to use <code>.json</code> to store most of the server-side information on Repl.it was also made.</p><p>Smite Build Maker was without a doubt my largest idea and project at the time. Its conception was a valuable learning experience with an impact that is reflected in all of my projects since. Initial release as well as future updates received outstandingly positive attention from the few voices that were willing to share. While it is not currently my most popular project, being behind both the Smite API App and my <em>Chance For Rain</em> website, it is without a doubt one of the most useful and one of the most evolved.</p>"
    },
    {
        "Title": "Documenting an Old Flash Game",
        "Content": "<h1 id='documenting-an-old-flash-game' style='width: 100% !important; text-align: center !important;'>Documenting an Old Flash Game</h1><p align='center' style='width: 100% !important; text-align: center !important;'><strong>January 31st, 2023</strong></p><h2 id='©-michael-warmbier' style='width: 100% !important; text-align: center !important;'>© Michael Warmbier</h2><p>&emsp;&emsp;Sometime in early January, it was suggested to me that I should try my hand in remaking an old game a colleague of mine was a fan of back when he was younger. That game, <em>PitSweeper</em>, was made in <em>Adobe Flash</em> back in 2009. Out of curiosity for how realistic such a task would be in a short time, I found a repository on Github named the <a href='https://github.com/jindrapetrik/jpexs-decompiler'>JPEXS Flash Decompiler</a> by Jindra Petrik. Despite its less-than-modern user interface, it was very helpful for viewing all the assets and scripts associated with the game.</p><p>Even with only little knowledge of <em>ActionScript</em>, the language which Flash relies on, as well as <em>Java</em>, the most well-known syntactically similar language, I was able to discern a lot of the intent from the one Java-centric university class I&#39;d taken. In this class, I&#39;d also learned how to create class diagrams. I started documenting the project as an opportunity to practice, with a fully detailed available collection of scripts present. Later on, this side-project became a fully detailed <a href='https://github.com/MichaelWarmbier/PitSweeper'>document on PitSweeper</a>.</p><img align='center' src='https://i.gyazo.com/e8ea3a07b01e349156f054a0d17ec618.gif'><p>I started this process by writing the names of all objects the game relied on, by hand and on paper, then connecting the names exactly how they stated they were; through inheritance within the scripts. Sifting through the classes was a great opportunity to learn about the differences between ActionScript and Java, as well as attributes I had not even heard of before. Following this, I created a class diagram in its entirety and as accurately as possible over the course of a few hours worth of work. </p><p>While the class diagram was in progress, I also started to begin my work on understanding the structures as they were defined. This included creating charts of all object sets that it would be beneficial to represent in that way, as well as turning those charts into <code>.csv</code> data that I could move over to Markdown later. Originally, a lot of the data names were only temporary or guesses, until sifting through the code further revealed their actual use; such as with the <code>dicetype</code> and <code>dicenumber</code> variables. I initially considered these to be part of the &#39;miss chance&#39; method that was present. Instead, as it turns out, it was related to the extra damage random damage feature. </p><p>Beyond attributes, determining the objects&#39; passive effects as well as fundamental considerations, such as level randomization and creation, required a lot of code translating. I opted to translate, to the best of my ability and with blatant language differences, ActionScript code into <em>C++</em> code. Along with this, I named related constants and variables after what they appeared to do (as they had defaulted to obfuscated names), while leaving comments and simplifying structures (such as converting iterated <code>while loops</code> to <code>for</code> loops).</p><p>The biggest challenge when documenting, although a short process, was writing a <em>Python</em> script that would give me the information I needed from the map data matrices. As they stood, they were just flat, one-dimension arrays of information. I needed to un-flatten them and then print that text. I also used padding to make all the values equal in length, as to make it easier to see what was going on. Lastly, in order to calculate the theoretical total level variations, I created a program that would mimic the bitwise operation done on a constant set of values present in the game&#39;s actual code. </p><p>This entire process was lengthy but fulfilling. Genuinely, an exciting opportunity to practice something I unexpectedly enjoyed a lot. It also added a fine document to my collection and became the second document I&#39;d ever written.</p>"
    },
    {
        "Title": "Collection of Codepen Art",
        "Content": "<h1 style='width: 100% !important; text-align: center !important;'>Collection of Codepen Art</h1><p style='width: 100% !important; text-align: center !important;'>January 30th, 2023</p><h2 style='width: 100%; text-align: center !important;'>© Michael Warmbier</h2><p style='width: 100%; text-align: center !important;'><a href='https://github.com/MichaelWarmbier/Old-Codepen-Art/'>View the code for each of these creations here!</a></p><p>&emsp;&emsp;In 2016 I was a Sophomore in Highschool. I had just gotten into a Web Design class, which was my introduction to Compsci and programming. I wasn&#39;t very good at the latter, with most of my time spent doing HTML art. For some odd reason, the programmatic nature of creating animations through the DOM was actually incredibly fulfilling. I enjoyed coming up with new ideas for things to make, some of which never made it passed fruition or were lost to time. But ultimately, a few of them were around for me to compile.</p><p>This blog post compiles my opinion on each of those creations now.</p><p><br><br><br></p><h2 id='-paper-mario-the-thousand-year-door---dark-wizzerd-' style='width: 100%; text-align: center !important;'>Paper Mario: The Thousand Year Door - Dark Wizzerd</h2><blockquote><p>I honestly don&#39;t know why, but one day I saw the animation for this enemy while watching someone else play the game. I thought to myself, I can make that work. I didn&#39;t make it work exactly, opting to use a front-facing view instead of the angled view they appear as in game. This was my first piece to be entirely animated with so many complex parts. I even learned how to create triangles for this!</p></blockquote><p align='center'><img src='https://gyazo.com/2809d75706bf1555346bea3b0725fa61.gif'></p><p><br><br></p><h2 id='-zte-blade-z-max-' style='width: 100%; text-align: center !important;'>ZTE Blade Z Max </h2><blockquote><p>This was the phone I carried at the time. You can probably see where the inspiration came from. I originally made a version of the phone I had prior, albeit much less animated (though, I remember, it also had a charger you could plug in). At this point I learned animations were a thing (and not just transitions) so I opted for some more creativity.</p></blockquote><p align='center'><img src='https://i.gyazo.com/3158cc72a33223b39073b6f0528a67d9.gif'></p><p><br><br></p><h2 id='-the-legend-of-zelda---3d-link-sprite-' style='width: 100%; text-align: center !important;'>The Legend of Zelda - 3D Link Sprite</h2><blockquote><p>I could of picked any sprite for this, but for whatever reason I choose Link. I even had some really poorly added music running for awhile from the game. This was inspired after I learned that it was possible to make cubes by abusing the z-index and 3DRotate features of CSS. It felt like I was making a game asset, and still makes me happy to remember the success I felt making something so complex. Even if the HTML was really, really bad.</p></blockquote><p align='center'><img src='https://i.gyazo.com/a10cb43ea3daea602977a44351f5ac51.gif'></p><p><br><br></p><h2 id='-keypad-game-' style='width: 100%; text-align: center !important;'>Keypad Game</h2><blockquote><p>I tried a few more things with cubes. They weren&#39;t super fast, or useful in most cases, but I got one idea out with them: a keypad game where the goal was to find the code (randomly placed!) in order to win. The colors kind of remind me of the unfinished lighting you would see in games.</p></blockquote><p align='center'><img src='https://i.gyazo.com/99cbc9f0d0c4239eb756c07b6c8fd5c7.gif'></p><p><br><br></p><h2 id='-mickey-mouse-art-' style='width: 100%; text-align: center !important;'>Mickey Mouse Art</h2><blockquote><p>I actually ended up making this in senior year. I was given a really poorly taught class on Adobe Illustrator, and had to make something for a final. Luckily, the teacher never actually checked to make sure it was really done in AI. So, I went with my most reliable skill at the time, HTML art. While it&#39;s honestly very slapped together, I&#39;m still impressed I managed to understand how to make a complex image out of shapes so easily.</p></blockquote><p align='center'><img src='https://i.gyazo.com/792a5edc8e15c904adfe5f81b00ed466.png'></p><p><br><br></p><h2 id='-six-sided-die-' style='width: 100%; text-align: center !important;'>Six-Sided Die</h2><blockquote><p>More cube stuff. I thought this was really impressive, but honestly had no idea what I was doing with animations. All the animations were predesigned in a way that always felt really unnecessary. But it has personality, and even a shadow!</p></blockquote><p align='center'><img src='https://i.gyazo.com/c899c23cff2728338e988ceba2d8c6f4.gif'></p><p><br><br></p><h2 id='-node-ai-' style='width: 100%; text-align: center !important;'>Node AI</h2><blockquote><p>Back then this was the extent of my &quot;AI&quot; knowledge. A <em>ball</em> whose only purpose is to move randomly within a node grid. I tried to give the whole project personality too. The AI even had an internal name, Anni the AI, and would randomly squish while moving around. </p></blockquote><p align='center'><img src='https://i.gyazo.com/d51df404b693fe833fadb0dc0de741c7.gif'></p><p><br><br></p><h2 id='-node-ai--1' style='width: 100%; text-align: center !important;'>Node AI</h2><blockquote><p>This project gets an honorable mention; even though it wasn&#39;t finished and is rather small, it was fairly creative. I never made a proper saturn ring, but I managed to mess around z-indexes enough to get some cool orbit going.</p></blockquote><p align='center'><img src='https://i.gyazo.com/58a47291009664c1a2d7287f0c97ac26.gif'></p>"
    }
]